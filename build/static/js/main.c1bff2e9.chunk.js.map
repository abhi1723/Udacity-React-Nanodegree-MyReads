{"version":3,"sources":["BooksAPI.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","BooksApp","state","bookList","searchedBooks","showSearchPage","this","getBookData","_this2","fetch","concat","then","res","json","data","books","console","log","setState","book","event","_this3","target","value","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","BooksAPI","catch","err","query","_this4","length","_this5","react_default","a","createElement","className","react_router","path","render","react_router_dom","to","type","placeholder","onChange","e","searchBooks","filter","searchedBook","undefined","imageLinks","map","key","style","width","height","backgroundImage","thumbnail","bookData","b","updateShelf","title","authors","author","join","exact","individualBook","disabled","onClick","React","Component","ReactDOM","src_App","document","getElementById"],"mappings":"yQACMA,EAAM,wCAIRC,EAAQC,aAAaD,MACpBA,IACHA,EAAQC,aAAaD,MAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAElE,IAAMC,EAAU,CACdC,OAAU,mBACVC,cAAiBR,kBCwNJS,6MA7NbC,MAAQ,CACNC,SAAU,GACVC,cAAe,GAOfC,gBAAgB,sFAGhBC,KAAKC,oDAEO,IAAAC,EAAAF,KDAdG,MAAK,GAAAC,OAAInB,EAAJ,UAAiB,CAAEO,YACrBa,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,EAAKC,QCDDJ,KAAK,SAAAG,GACrBE,QAAQC,IAAI,SAAUH,GACtBN,EAAKU,SAAS,iBAAO,CACnBf,SAAUW,2CAKJK,EAAMC,GAAO,IAAAC,EAAAf,KACvBU,QAAQC,IAAI,QAASG,EAAME,OAAOC,ODNhB,SAACJ,EAAMK,GAAP,OACpBf,MAAK,GAAAC,OAAInB,EAAJ,WAAAmB,OAAiBS,EAAKM,IAAM,CAC/BC,OAAQ,MACR5B,QAAQ6B,OAAAC,EAAA,EAAAD,CAAA,GACH7B,EADE,CAEL+B,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAER,YACtBb,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SCDjBoB,CAAgBd,EAAMC,EAAME,OAAOC,OAChCZ,KAAK,SAAAC,GACJS,EAAKd,gBAEN2B,MAAM,SAAAC,GAAG,OAAInB,QAAQC,IAAI,SAAUkB,yCAE5Bf,GAAO,IDHEgB,ECGFC,EAAA/B,MACjBU,QAAQC,IAAI,QAASG,EAAME,OAAOC,OACH,IAA5BH,EAAME,OAAOC,MAAMe,UDLHF,ECMHhB,EAAME,OAAOC,MDL/Bd,MAAK,GAAAC,OAAInB,EAAJ,WAAkB,CACrBmC,OAAQ,OACR5B,QAAQ6B,OAAAC,EAAA,EAAAD,CAAA,GACH7B,EADE,CAEL+B,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAEI,YACtBzB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,EAAKC,SCFhBJ,KAAK,SAAAG,GACJE,QAAQC,IAAI,OAAQH,GACpBuB,EAAKnB,SAAS,iBAAO,CACnBd,cAAeU,OAGlBoB,MAAM,SAAAC,GACLE,EAAKnB,SAAS,iBAAO,CACnBd,cAAe,MAEjBY,QAAQC,IAAI,SAASkB,sCAGlB,IAAAI,EAAAjC,KACP,OACEkC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,KAAK,UAAUC,OAAQ,kBAC5BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,KAAIR,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAlB,UAGbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BASbH,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,YAAY,4BAA4BC,SAAU,SAACC,GAAD,OAAOb,EAAKc,YAAYD,QAIjGZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACXJ,EAAKrC,MAAME,eAAiBmC,EAAKrC,MAAME,cAAckC,OAAO,GAAKC,EAAKrC,MAAME,cAAckD,OAAO,SAAAC,GAAY,YAA8BC,IAA1BD,EAAaE,aAAwBC,IAAI,SAAAvC,GACzJ,OACEqB,EAAAC,EAAAC,cAAA,MAAIiB,IAAKxC,EAAKM,IACZe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaiB,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,gBAAe,OAAArD,OAASS,EAAKsC,WAAWO,UAAzB,QAC7ExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAEbH,EAAAC,EAAAC,cAAA,UAAQnB,MAAOgB,EAAKrC,MAAMC,SAASmD,OAAO,SAAAW,GAAQ,OAAIA,EAASxC,KAAON,EAAKM,KAAIiC,IAAI,SAAAQ,GAAC,OAAIA,EAAE1C,QAAO,GAAI2B,SAAU,SAACC,GAAD,OAAOb,EAAK4B,YAAYhD,EAAMiC,KAC3IZ,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,QAAd,cACAiB,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,oBAAd,qBACAiB,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,cAAd,gBACAiB,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,QAAd,QACAiB,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,QAAd,WAINiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcxB,EAAKiD,OAClC5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBxB,EAAKkD,SAAWlD,EAAKkD,QAAQX,IAAI,SAAAY,GAAM,OAAIA,IAAQC,KAAK,gBASvG/B,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAO4B,OAAK,EAAC3B,KAAK,IAAIC,OAAQ,kBAC5BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,qBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACXJ,EAAKrC,MAAMC,SAASmD,OAAO,SAAAmB,GAAc,MAA6B,qBAAzBA,EAAejD,QAA8BkC,IAAI,SAACvC,GAC9F,OACEqB,EAAAC,EAAAC,cAAA,MAAIiB,IAAKxC,EAAKM,IACZe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaiB,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,gBAAe,OAAArD,OAASS,EAAKsC,WAAWO,UAAzB,QAC7ExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,mBAAmB4B,SAAU,SAACC,GAAD,OAAOb,EAAK4B,YAAYhD,EAAMiC,KACvEZ,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,OAAOmD,UAAQ,GAA7B,cACAlC,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,oBAAd,qBACAiB,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,cAAd,gBACAiB,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,QAAd,QACAiB,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,QAAd,WAINiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcxB,EAAKiD,OAClC5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBxB,EAAKkD,QAAQX,IAAI,SAAAY,GAAM,OAAIA,IAAQC,KAAK,aAarF/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACXJ,EAAKrC,MAAMC,SAASmD,OAAO,SAAAmB,GAAc,MAA6B,eAAzBA,EAAejD,QAAwBkC,IAAI,SAACvC,GACxF,OACEqB,EAAAC,EAAAC,cAAA,MAAIiB,IAAKxC,EAAKM,IACZe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaiB,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,gBAAe,OAAArD,OAASS,EAAKsC,WAAWO,UAAzB,QAC7ExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,aAAa4B,SAAU,SAACC,GAAD,OAAOb,EAAK4B,YAAYhD,EAAMiC,KACjEZ,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,OAAOmD,UAAQ,GAA7B,cACAlC,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,oBAAd,qBACAiB,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,cAAd,gBACAiB,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,QAAd,QACAiB,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,QAAd,WAINiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcxB,EAAKiD,OAClC5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBxB,EAAKkD,QAAQX,IAAI,SAAAY,GAAM,OAAIA,IAAQC,KAAK,aAarF/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,QACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACXJ,EAAKrC,MAAMC,SAASmD,OAAO,SAAAmB,GAAc,MAA6B,SAAzBA,EAAejD,QAAkBkC,IAAI,SAACvC,GAClF,OACEqB,EAAAC,EAAAC,cAAA,MAAIiB,IAAKxC,EAAKM,IACZe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaiB,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,gBAAe,OAAArD,OAASS,EAAKsC,WAAWO,UAAzB,QAC7ExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,OAAO4B,SAAU,SAACC,GAAD,OAAOb,EAAK4B,YAAYhD,EAAMiC,KAC3DZ,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,OAAOmD,UAAQ,GAA7B,cACAlC,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,oBAAd,qBACAiB,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,cAAd,gBACAiB,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,QAAd,QACAiB,EAAAC,EAAAC,cAAA,UAAQnB,MAAM,QAAd,WAINiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcxB,EAAKiD,OAClC5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBxB,EAAKkD,QAAQX,IAAI,SAAAY,GAAM,OAAIA,IAAQC,KAAK,eAezF/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,WAAUR,EAAAC,EAAAC,cAAA,UAAQiC,QAAS,kBAAMpC,EAAKrB,SAAS,CAACd,cAAc,OAApD,4BArNVwE,IAAMC,iBCC7BC,IAAShC,OACTN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIP,EAAAC,EAAAC,cAACqC,EAAD,OAEHC,SAASC,eAAe","file":"static/js/main.c1bff2e9.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport { Link, Route } from 'react-router-dom';\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    bookList: [],\r\n    searchedBooks: [],\r\n    /**\r\n     * TODO: Instead of using this state variable to keep track of which page\r\n     * we're on, use the URL in the browser's address bar. This will ensure that\r\n     * users can use the browser's back and forward buttons to navigate between\r\n     * pages, as well as provide a good URL they can bookmark and share.\r\n     */\r\n    showSearchPage: false\r\n  }\r\n  componentDidMount() {\r\n    this.getBookData();\r\n  }\r\n  getBookData() {\r\n    BooksAPI.getAll().then(data => {\r\n      console.log(\"data: \", data);\r\n      this.setState(() => ({\r\n        bookList: data\r\n      }))\r\n    });\r\n\r\n  }\r\n  updateShelf(book, event) {\r\n    console.log(\"Shelf\", event.target.value);\r\n    BooksAPI.update(book, event.target.value)\r\n      .then(res => {\r\n        this.getBookData();\r\n      })\r\n      .catch(err => console.log(\"Err : \", err));\r\n  };\r\n  searchBooks(event) {\r\n    console.log(\"event\", event.target.value);\r\n    if(event.target.value.length===0) return;\r\n    BooksAPI.search(event.target.value)\r\n      .then(data => {\r\n        console.log(\"Data\", data);\r\n        this.setState(() => ({\r\n          searchedBooks: data\r\n        }))\r\n      })\r\n      .catch(err=>{\r\n        this.setState(() => ({\r\n          searchedBooks: []\r\n        }))\r\n        console.log(\"err : \",err);\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        {/* {this.state.bookList}     */}\r\n        <Route path=\"/search\" render={() => (\r\n          <div className=\"search-books\">\r\n            <div className=\"search-books-bar\">\r\n              <Link to=\"/\"><button className=\"close-search\">\r\n                Close\r\n              </button></Link>\r\n              <div className=\"search-books-input-wrapper\">\r\n                {/*\r\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                  You can find these search terms here:\r\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                  you don't find a specific author or title. Every search is limited by search terms.\r\n                */}\r\n                <input type=\"text\" placeholder=\"Search by title or author\" onChange={(e) => this.searchBooks(e)} />\r\n\r\n              </div>\r\n            </div>\r\n            <div className=\"search-books-results\">\r\n              <ol className=\"books-grid\">\r\n                {this.state.searchedBooks && this.state.searchedBooks.length>0 && this.state.searchedBooks.filter(searchedBook => searchedBook.imageLinks!==undefined).map(book => {\r\n                  return (\r\n                    <li key={book.id}>\r\n                      <div className=\"book\">\r\n                        <div className=\"book-top\">\r\n                          <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\r\n                          <div className=\"book-shelf-changer\">\r\n                            {/* {this.state.bookList.filter(bookData => bookData.id === book.id).map(b => b.shelf)[0]} */}\r\n                            <select value={this.state.bookList.filter(bookData => bookData.id === book.id).map(b => b.shelf)[0]} onChange={(e) => this.updateShelf(book, e)}>\r\n                              <option value=\"move\"  >Move to...</option>\r\n                              <option value=\"currentlyReading\" >Currently Reading</option>\r\n                              <option value=\"wantToRead\" >Want to Read</option>\r\n                              <option value=\"read\">Read</option>\r\n                              <option value=\"none\">None</option>\r\n                            </select>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"book-title\">{book.title}</div>\r\n                        <div className=\"book-authors\">{book.authors && book.authors.map(author => author).join(\",\")}</div>\r\n                      </div>\r\n                    </li>)\r\n\r\n                })}\r\n              </ol>\r\n            </div>\r\n          </div>\r\n        )} />\r\n        <Route exact path=\"/\" render={() => (\r\n          <div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n              <h1>MyReads</h1>\r\n            </div>\r\n            <div className=\"list-books-content\">\r\n              <div>\r\n                <div className=\"bookshelf\">\r\n                  <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n                  <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">\r\n                      {this.state.bookList.filter(individualBook => individualBook.shelf === \"currentlyReading\").map((book) => {\r\n                        return (\r\n                          <li key={book.id}>\r\n                            <div className=\"book\">\r\n                              <div className=\"book-top\">\r\n                                <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\r\n                                <div className=\"book-shelf-changer\">\r\n                                  <select value=\"currentlyReading\" onChange={(e) => this.updateShelf(book, e)}>\r\n                                    <option value=\"move\" disabled>Move to...</option>\r\n                                    <option value=\"currentlyReading\" >Currently Reading</option>\r\n                                    <option value=\"wantToRead\" >Want to Read</option>\r\n                                    <option value=\"read\">Read</option>\r\n                                    <option value=\"none\">None</option>\r\n                                  </select>\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"book-title\">{book.title}</div>\r\n                              <div className=\"book-authors\">{book.authors.map(author => author).join(\",\")}</div>\r\n                            </div>\r\n                          </li>\r\n                        );\r\n                      }\r\n\r\n\r\n                      )}\r\n\r\n\r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n                <div className=\"bookshelf\">\r\n                  <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n                  <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">\r\n                      {this.state.bookList.filter(individualBook => individualBook.shelf === \"wantToRead\").map((book) => {\r\n                        return (\r\n                          <li key={book.id}>\r\n                            <div className=\"book\">\r\n                              <div className=\"book-top\">\r\n                                <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\r\n                                <div className=\"book-shelf-changer\">\r\n                                  <select value=\"wantToRead\" onChange={(e) => this.updateShelf(book, e)}>\r\n                                    <option value=\"move\" disabled>Move to...</option>\r\n                                    <option value=\"currentlyReading\">Currently Reading</option>\r\n                                    <option value=\"wantToRead\">Want to Read</option>\r\n                                    <option value=\"read\">Read</option>\r\n                                    <option value=\"none\">None</option>\r\n                                  </select>\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"book-title\">{book.title}</div>\r\n                              <div className=\"book-authors\">{book.authors.map(author => author).join(\",\")}</div>\r\n                            </div>\r\n                          </li>\r\n                        );\r\n                      }\r\n\r\n\r\n                      )}\r\n\r\n\r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n                <div className=\"bookshelf\">\r\n                  <h2 className=\"bookshelf-title\">Read</h2>\r\n                  <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">\r\n                      {this.state.bookList.filter(individualBook => individualBook.shelf === \"read\").map((book) => {\r\n                        return (\r\n                          <li key={book.id}>\r\n                            <div className=\"book\">\r\n                              <div className=\"book-top\">\r\n                                <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\r\n                                <div className=\"book-shelf-changer\">\r\n                                  <select value=\"read\" onChange={(e) => this.updateShelf(book, e)}>\r\n                                    <option value=\"move\" disabled>Move to...</option>\r\n                                    <option value=\"currentlyReading\">Currently Reading</option>\r\n                                    <option value=\"wantToRead\">Want to Read</option>\r\n                                    <option value=\"read\">Read</option>\r\n                                    <option value=\"none\">None</option>\r\n                                  </select>\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"book-title\">{book.title}</div>\r\n                              <div className=\"book-authors\">{book.authors.map(author => author).join(\",\")}</div>\r\n                            </div>\r\n                          </li>\r\n                        );\r\n                      }\r\n\r\n\r\n                      )}\r\n\r\n\r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"open-search\">\r\n              <Link to=\"/search\"><button onClick={() => this.setState({searchedBooks:[]})}>Add a book</button></Link>\r\n            </div>\r\n          </div>\r\n        )} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n<BrowserRouter>\r\n    <App />\r\n</BrowserRouter>,\r\n document.getElementById('root'))\r\n"],"sourceRoot":""}